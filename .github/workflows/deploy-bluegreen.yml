name: Deploy Blue-Green to GKE

on:
  push:
    branches:
      - master

env:
    REGION: ${{secrets.GKE_LOCATION}}
    PROJECT_ID: ${{secrets.GCP_PROJECT}}
    REPO: blue-green-repo
    IMAGE: us-central1-docker.pkg.dev/${{secrets.GCP_PROJECT}}/blue-green-repo/myapp
    CLUSTER: ${{secrets.GKE_CLUSTER}}
    NAMESPACE: prod


jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Auth to Google Cloud
              uses: google-github-actions/auth@v2
              with:
                credentials_json: ${{ secrets.GCP_SA_KEY }}
            
            - name: setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                project_id: ${{ secrets.GCP_PROJECT }}
      
            - name: Configure Docker auth for Artifact Registry
              run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

            - name: Build and push Docker image
              run: |
                 GIT_SHA=${{ github.sha }}
                 docker build -t $IMAGE:$GIT_SHA .
                 docker push $IMAGE:$GIT_SHA
                 echo "TAG=$GIT_SHA" >> $GITHUB_ENV
            
            - name: Get GKE credentials
              run: | 
                gcloud container clusters get-credentials "$CLUSTER" --region "$REGION" --project "$PROJECT_ID"
                kubectl get nodes

            - name: Determine current live color
              id: live
              run: |
                    set -e
                    CURRENT=$(kubectl get deployment myapp -n $NAMESPACE -o jsonpath='{.spec.selector.matchLabels.version}')
                    echo "current=$CURRENT"
                    if [ "$CURRENT" == "blue" ]; then TARGET="green"; else TARGET="blue"; fi
                    echo "target=$TARGET"
                    echo "current=$CURRENT" >> $GITHUB_OUTPUT
                    echo "target=$TARGET" >> $GITHUB_OUTPUT
            
            - name: Render target deployment manifest
              run: |
                  mkdir -p rendered
                  cp k8s/templates/deployment-${{ steps.live.outputs.target }}.yaml rendered/
                  sed -i "s/REPLACE_GCP_PROJECT/${PROJECT_ID}/g" rendered/deployment-${{ steps.live.outputs.target }}.yaml"
                  sed -i "s/REPLACE_TAG/${TAG}/g" rendered/deployment-${{ steps.live.outputs.target }}.yaml
                  cat rendered/deployment-${{ steps.live.outputs.target }}.yaml

            - name: Apply target color (create/update)
              run: |
                    kubectl apply -f rendered/deployment-${{ steps.live.outputs.target }}

            - name: Wait for target deployment to be ready
              run: |
                  kubectl rollout status deployment/myapp-${{ steps.live.outputs.target }} -n $NAMESPACE --timeout=120s

            - name: Switch Traffic (Service Selector)
              run: |
                kubectl patch service myapp -n $NAMESPACE -p "{\"spec\":{\"selector\":{\"app\":\"myapp\",\"version\":\"${{ steps.live.outputs.target }}\"}}}"
                kubectl get svc myapp -n $NAMESPACE -o yaml

            - name: Show status
              run: |
                kubectl get pods -n $NAMESPACE -o wide
                kubectl get svc myapp -n $NAMESPACE -o wide
                kubectl get deployment myapp -n $NAMESPACE -o wide